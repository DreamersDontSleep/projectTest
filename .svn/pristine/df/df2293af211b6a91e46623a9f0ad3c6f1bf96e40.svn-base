<template>
	<div>
		<el-scrollbar :native="false" :noresize="false">
			<div class="carousel">
				<div class="content">
					<div class="chart">
						<div class="title">意识统计</div>
						<ve-ring
							height="calc(100% - 24px)"
							:judge-width="true"
							:resizeable="true"
							:colors="colors"
							:extend="extend"
							:settings="trendChartSettings"
							:data="ideaData"
						></ve-ring>
					</div>
					<el-divider direction="vertical"></el-divider>
					<div class="info">
						<div class="info-title">统计信息</div>
						<!-- <div class="info-legend">
							<div v-for="(color, name) in colorMatch" :key="color">
								<span :style="{ 'background-color': color }" class="legend"></span>
								<span>{{ name }}</span>
							</div>
						</div> -->
						<el-scrollbar :native="false" :noresize="false">
							<ul>
								<li
									v-for="(item, index) in ideaEssay"
									:key="item.uuid"
									@click="showEssay(item, '意识形态')"
								>
									<el-tooltip
										v-if="item.country.length > 4"
										class="title"
										effect="dark"
										:content="item.country"
										placement="left"
									>
										<span class="title" :style="{ 'background-color': colorMatch[item.type] }">{{
											item.country
										}}</span>
									</el-tooltip>
									<span v-else class="title" :style="{ 'background-color': colorMatch[item.type] }">{{
										item.country
									}}</span>
									<span>{{ item.time + "&nbsp" + item.content }}</span>
								</li>
							</ul>
						</el-scrollbar>
					</div>
				</div>
			</div>
		</el-scrollbar>
		<!--        文章显示-->
		<el-dialog class="read-dialog" :title="readTitle" :visible.sync="dialogVisible" width="60%">
			<span class="read-text">{{ dialogText }}</span>
		</el-dialog>
	</div>
</template>

<script>
	import { colors } from "config/base.js";
	import { sliceShow, concatBy } from "utils/common.js";
	import mixin from "components/mixins";
	import { getIdeology, getStatics } from "api/polls.js";

	export default {
		name: "Ideology",
		mixins: [mixin],
		data() {
			this.colorMatch = {
				政治: colors[0],
				经济: colors[1],
				文化: colors[2],
				宗教: colors[3]
			};
			this.extend = {
				series: {
					type: "pie",
					roseType: "radius",
					radius: [0, "60%"],
					avoidLabelOverlap: false,
					//标签
					label: {
						show: true,
						position: "outside",
						formatter: "{b}:{d}%" //模板变量有 {a}、{b}、{c}、{d}，分别表示系列名，数据名，数据值，百分比。{d}数据会根据value值计算百分比
					},
					itemStyle: {
						color: seriesIndex => {
							return this.colorMatch[seriesIndex.name];
						}
					}
				}
			};
			return {
				//文章弹窗
				dialogVisible: false,
				dialogText: "",
				readTitle: "",
				ideaData: {
					columns: ["意识形态", "数量"],
					rows: []
				},
				ideaEssay: []
			};
		},
		computed: {
			colorList() {
				return {
					0: "政治",
					1: "经济",
					3: "文化",
					2: "宗教"
				};
			}
		},
		created() {
			this.getData();
			this.getTypeData();
		},
		methods: {
			//切换
			switchItem(val) {
				this.activItem = val;
				this.$refs["carousel"].setActiveItem(val);
			},
			//切换
			carouselChange(index) {
				this.activItem = this.items[index];
			},
			//展示文章
			showEssay(content, name) {
				console.log(content);
				this.dialogVisible = true;
				this.readTitle = name + " - " + content.country;
				this.dialogText = content.content;
			},
			getTypeData() {
				getStatics({ id: 1 })
					.then(res => {
						if (this.$check.isNullData(res)) {
							this.ideaData.rows = [
								{
									意识形态: "暂无数据",
									数量: 0
								}
							];
							return;
						}
						let allData = res.data;
						this.ideaData.rows = [];
						let nationArr = [];
						for (let key in allData) {
							let data = allData[key];
							this.ideaData.columns.push(key);
							nationArr.push({
								意识形态: key,
								数量: data
							});
						}
						this.ideaData.rows = nationArr;
					})
					.catch(() => {
						this.ideaData.rows = [
							{
								意识形态: "暂无数据",
								数量: 0
							}
						];
					});
			},
			getData() {
				getIdeology()
					.then(res => {
						if (this.$check.isNullData(res)) {
							this.ideaEssay = [{ country: "无", content: "暂无数据", time: "" }];
							return;
						}
						this.ideaEssay = [];
						res.data.forEach(cur => {
							this.ideaEssay.push({
								country: cur.name,
								content: cur.content,
								time: cur.createTime,
								type: cur.type
							});
						});
					})
					.catch(err => {
						this.ideaEssay = [{ country: "无", content: "暂无数据", time: "" }];
					});
			}
		}
	};
</script>

<style scoped lang="scss">
	ul {
		margin: 0;
		padding: 0;
	}
	.carousel {
		height: calc(100% - 0px);
		.content {
			height: calc(100% - 0px);
		}
	}

	.info-title ~ .el-scrollbar[data-v-e8c14a5c] {
		height: calc(100% - 0px);
	}

	/*最外层的滚动*/
	.el-scrollbar {
		height: calc(100% - 0px);

		/deep/ .el-scrollbar__view {
			height: calc(100% - 8px);
		}
	}

	.trend-chart {
		height: 80% !important;
	}
	.info .el-scrollbar {
		height: calc(100% - 46px);
	}
</style>
